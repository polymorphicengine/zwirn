name: build-release-linux

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc: ['9.4.2']
        cabal: ['3.8.1.0']

    steps:
    - name: check out code
      uses: actions/checkout@v3

    - name: setup haskell
      uses: haskell/actions/setup@v2
      id: setup-haskell-cabal
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        
    - env:
       ghc-package-path: ${{ steps.setup-haskell-cabal.outputs.ghc-path }}/../ghc/${{ matrix.ghc }}/lib/ghc-${{ matrix.ghc }}/lib
       cabal-package-path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}/ghc-${{ matrix.ghc }} 
        
    - name: configure the build
      run: |
        cabal update
        cabal configure --enable-tests --enable-benchmarks --disable-documentation
        cabal build --dry-run
      # The last step generates dist-newstyle/cache/plan.json for the cache key.

    - name: restore cached dependencies
      uses: actions/cache/restore@v3
      id: cache
      env:
          key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-cabal-${{ matrix.cabal }}
      with:
          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

    - name: install dependencies
      run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: save cached dependencies
      uses: actions/cache/save@v3
        # Caches are immutable, trying to save with the same key would error.
      if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
      with:
          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: cabal build and install
      run: |
        cabal build
        cabal install zwirn --lib

    - name: move GHC libs and configs
      run: |
        mkdir -p binary/haskell-libs/ghc-packages/
        mkdir -p binary/haskell-libs/package.conf.d/
        mkdir -p binary/bin/
        cp -r ${{ env.ghc-package-path }}/x86_64-linux-ghc-${{ matrix.ghc }}/* binary/haskell-libs/ghc-packages
        cp -r ${{ steps.setup-haskell-cabal.outputs.ghc-path }}/../ghc/${{ matrix.ghc }}/lib/ghc-${{ matrix.ghc }}/lib/package.conf.d/* binary/haskell-libs/package.conf.d
        cp -r ${{ steps.setup-haskell-cabal.outputs.ghc-path }}/../ghc/${{ matrix.ghc }}/lib/ghc-${{ matrix.ghc }}/lib/settings binary/haskell-libs/settings
        cp -r ${{ steps.setup-haskell-cabal.outputs.ghc-path }}/../ghc/${{ matrix.ghc }}/lib/ghc-${{ matrix.ghc }}/lib/llvm-targets binary/haskell-libs/llvm-targets
        cp -r ${{ steps.setup-haskell-cabal.outputs.ghc-path }}/../ghc/${{ matrix.ghc }}/lib/ghc-${{ matrix.ghc }}/lib/llvm-passes binary/haskell-libs/llvm-passes
        cp -r ${{ steps.setup-haskell-cabal.outputs.ghc-path }}/../ghc/${{ matrix.ghc }}/lib/ghc-${{ matrix.ghc }}/lib/bin/* binary/bin
        ls binary/haskell-libs/ghc-packages

    - name: move installed packages
      run: |
        mkdir -p binary/haskell-libs/packages/
        cp -r ${{ steps.setup-haskell-cabal.outputs.cabal-store }}/ghc-${{ matrix.ghc }}/* binary/haskell-libs/packages
        ls binary/haskell-libs/packages

    - name: change paths in config files (GHC)
      run: |
        sed -i 's/..\/lib\/x86_64-linux-ghc-${{ matrix.ghc }}/ghc-packages/g' binary/haskell-libs/package.conf.d/*

    - name: change paths in config files (cabal)
      run: |
        mv binary/haskell-libs/packages/package.db binary/haskell-libs/package.db
        sed -i 's/\/home\/runner\/.cabal\/store\/ghc-${{ matrix.ghc }}/${pkgroot}\/packages/g' binary/haskell-libs/package.db/*

    - name: ghc-pkg recache
      run: |
        ghc-pkg --package-db=binary/haskell-libs/package.conf.d recache
        ghc-pkg --package-db=binary/haskell-libs/package.db recache
        ghc-pkg --package-db=binary/haskell-libs/package.conf.d --package-db=binary/haskell-libs/package.db check


    - name: move c-libs
      run: |
        mkdir -p binary/c-libs/
        cp /usr/lib/x86_64-linux-gnu/libz.so.1             binary/c-libs/libz.so.1
        cp /usr/lib/x86_64-linux-gnu/libtinfo.so.6         binary/c-libs/libtinfo.so.6
        cp /usr/lib/x86_64-linux-gnu/librt.so.1            binary/c-libs/librt.so.1
        cp /usr/lib/x86_64-linux-gnu/libutil.so.1          binary/c-libs/libutil.so.1
        cp /usr/lib/x86_64-linux-gnu/libpthread.so.0       binary/c-libs/libpthread.so.0
        cp /usr/lib/x86_64-linux-gnu/libm.so.6             binary/c-libs/libm.so.6
        cp /usr/lib/x86_64-linux-gnu/libgmp.so.10          binary/c-libs/libgmp.so.10
        cp /usr/lib/x86_64-linux-gnu/libc.so.6             binary/c-libs/libc.so.6
        cp /usr/lib/x86_64-linux-gnu/libdl.so.2            binary/c-libs/libdl.so.2
        ln -s /usr/lib/x86_64-linux-gnu/libz.so.1          binary/c-libs/libz.so
        ln -s /usr/lib/x86_64-linux-gnu/libtinfo.so.6      binary/c-libs/libtinfo.so
        ln -s /usr/lib/x86_64-linux-gnu/librt.so.1         binary/c-libs/librt.so
        ln -s /usr/lib/x86_64-linux-gnu/libutil.so.1       binary/c-libs/libutil.so
        ln -s /usr/lib/x86_64-linux-gnu/libpthread.so.0    binary/c-libs/libpthread.so
        ln -s /usr/lib/x86_64-linux-gnu/libm.so.6          binary/c-libs/libm.so
        ln -s /usr/lib/x86_64-linux-gnu/libgmp.so.10       binary/c-libs/libgmp.so
        ln -s /usr/lib/x86_64-linux-gnu/libc.so.6          binary/c-libs/libc.so
        ln -s /usr/lib/x86_64-linux-gnu/libdl.so.2         binary/c-libs/libdl.so

   # - name: remove unneccessary libs
   #   run: |
   #     cd tidal-listener/binary/haskell-libs/ghc-packages
   #     rm -r ghc-${{ matrix.ghc }}
   #     rm -r Cabal-*

    - name: fake gcc
      run: |
        cp fake_gcc.sh binary/bin/fake_gcc.sh
        sed -i 's/gcc/bin\/fake_gcc.sh/g' binary/haskell-libs/settings
        chmod 755 binary/bin/fake_gcc.sh

    - name: move static
      run: cp -r static binary/static
      
    - name: move src
      run: cp -r src binary/src

    - name: move executable
      run: |
        cp dist-newstyle/build/x86_64-linux/ghc-${{ matrix.ghc }}/zwirn-0.1.0.0/x/zwirn-interpreter/build/zwirn-interpreter/zwirn-interpreter binary/zwirn

    - name: zip files
      run: tar cvfj zwirn-release-linux.tar binary/*

    - uses: actions/upload-artifact@v3
      with:
        name: zwirn-release-linux
        path: zwirn-release-linux.tar

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/download-artifact@v2
    - run: ls */*

    - uses: softprops/action-gh-release@v1
      with:
        files: artifact/linux.tar
