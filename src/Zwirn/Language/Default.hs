{-# LANGUAGE OverloadedStrings #-}
module Zwirn.Language.Default
    ( defaultTypeEnv
    ) where

import Zwirn.Language.TypeCheck.Types
import Zwirn.Language.TypeCheck.Env

import Data.Map as Map
import Data.Text (Text)

defaultTypeEnv :: TypeEnv
defaultTypeEnv = TypeEnv (Map.fromList $ others ++ typeList) defaultInstances

defaultInstances :: [Instance]
defaultInstances = [ IsIn "Num" numberT
                   , IsIn "Num" valMapT
                   , IsIn "Fractional" numberT
                   , IsIn "Fractional" valMapT
                   , IsIn "Ord" numberT
                   , IsIn "Ord" valMapT
                   , IsIn "Show" numberT
                   , IsIn "Show" valMapT
                   , IsIn "show" textT
                   ]

others :: [(Text,Scheme)]
others = [ ("layer", Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b")))))
         , ("\'", Forall ["a","b"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeVar "b")))))
         ]

typeList :: [(Text,Scheme)]
typeList = [("#",Forall [] (Qual [] (TypeArr (TypeCon "ValueMap") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("$",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("$|",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("&&",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("*",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeCon "Number") (TypeVar "a"))))),("*|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("+",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("++",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("+|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("-",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("-|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),(".",Forall ["a","b","d"] (Qual [] (TypeArr (TypeArr (TypeVar "b") (TypeVar "d")) (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "d")))))),("/",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeCon "Number") (TypeVar "a"))))),("//",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("/|",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("==",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("?",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeCon "Number") (TypeVar "a"))))),("accelerate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("add",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("amp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("att",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("attack",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bandf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bandq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bd",Forall [] (Qual [] (TypeCon "Text"))),("begin",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("binshift",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("blend",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("bpf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bpq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("c",Forall [] (Qual [] (TypeCon "Number"))),("ccn",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ccv",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("channel",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("chop",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("coarse",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("color",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeCon "Text"))))))),("comb",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("const",Forall ["a","b"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeVar "b") (TypeVar "a"))))),("cps",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("crush",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ctf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("cut",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("cutoff",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("decay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("degrade",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("degradeBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("delay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("delayfb",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("delayt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("delaytime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("det",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("detune",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("dfb",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("diff",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("distort",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("djf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("dry",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("dt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("dur",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("e",Forall [] (Qual [] (TypeCon "Number"))),("end",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("enhance",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("every",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("expression",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("f",Forall [] (Qual [] (TypeCon "Number"))),("fadeInTime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("fadeOutTime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("fadeTime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("fast",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("floor",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("freeze",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("freq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("from",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("fshift",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("gain",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("gap",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("gat",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("gate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("gradient",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Text")))),("harmonic",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hbrick",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hcutoff",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hlayer",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("hmask",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("hold",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hpf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hpq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hresonance",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hshape",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Text")))))),("id",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("imag",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("irand",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("iter",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("jux",Forall [] (Qual [] (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("krush",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("lagogo",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("lbrick",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("legato",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("leslie",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("lock",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("loop",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("loopAt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("lpf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("lpq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("mask",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("midibend",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("miditouch",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("modulate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("modulateHue",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("modulateKaleid",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("modwheel",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("mult",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("n",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("noise",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Text")))),("note",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("nudge",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("number",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octave",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octer",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octersub",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octersubsub",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("offset",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("orbit",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("osc",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Text")))),("out",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("overgain",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("overshape",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("pB",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Number") (TypeCon "ValueMap"))))),("pN",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Number") (TypeCon "ValueMap"))))),("pS",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "ValueMap"))))),("pan",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("panorient",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("panspan",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("pansplay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("panwidth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("partials",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("perlin",Forall [] (Qual [] (TypeCon "Number"))),("phasdp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("phaserdepth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("phaserrate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("phasr",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ply",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("plyWith",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("por",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rand",Forall [] (Qual [] (TypeCon "Number"))),("randslice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("range",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number")))))),("rarely",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("rate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("real",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rel",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("release",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("resonance",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rev",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("ring",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ringdf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ringf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("room",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rotL",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("rotR",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("round",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("run",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("s",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("sagogo",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("saw",Forall [] (Qual [] (TypeCon "Number"))),("scr",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("scram",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("segment",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("shape",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("show",Forall ["a"] (Qual [IsIn "Show" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeCon "Text")))),("sine",Forall [] (Qual [] (TypeCon "Number"))),("size",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sld",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("slice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("slide",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("slow",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("smear",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("smooth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sn",Forall [] (Qual [] (TypeCon "Text"))),("solid",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Text")))))),("sometimes",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("sound",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("speed",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("spin",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("splice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("squiz",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("src",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "Text")))),("std",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("striate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("striateBy",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("struct",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("stt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("stutterdepth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("stuttertime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("superimpose",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("sus",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sustain",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sustainpedal",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sz",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("t",Forall [] (Qual [] (TypeCon "Number"))),("tick",Forall ["a","b"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeVar "b"))))),("timeLoop",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("timescale",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("timescalewin",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("to",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("toArg",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("tremdp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tremolodepth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tremolorate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tremr",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tri",Forall [] (Qual [] (TypeCon "Number"))),("triode",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tsdelay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("unit",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("up",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("velocity",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("voi",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("voice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("voronoi",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Text")))))),("vowel",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("waveloss",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("while",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("xsdelay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("|$",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("|$|",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("|*",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|*|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|+",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|-",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|/",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("||",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("~>",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a")))))]
