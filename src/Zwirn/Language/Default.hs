{-# LANGUAGE OverloadedStrings #-}
module Zwirn.Language.Default
    ( defaultTypeEnv
    ) where

{-
    Default.hs - provides the default type environment,
    automatically generated
    Copyright (C) 2023, Martin Gius

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this library.  If not, see <http://www.gnu.org/licenses/>.
-}

import Zwirn.Language.TypeCheck.Types
import Zwirn.Language.TypeCheck.Env

import Data.Map as Map
import Data.Text (Text)

defaultTypeEnv :: TypeEnv
defaultTypeEnv = TypeEnv (Map.fromList $ others ++ typeList) defaultInstances

defaultInstances :: [Instance]
defaultInstances = [ IsIn "Num" numberT
                   , IsIn "Num" valMapT
                   , IsIn "Fractional" numberT
                   , IsIn "Fractional" valMapT
                   , IsIn "Ord" numberT
                   , IsIn "Ord" valMapT
                   , IsIn "Show" numberT
                   , IsIn "Show" valMapT
                   , IsIn "show" textT
                   ]

others :: [(Text,Scheme)]
others = [ ("\'", Forall ["a","b"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeVar "b")))))
         ]

typeList :: [(Text,Scheme)]
typeList = [("#",Forall [] (Qual [] (TypeArr (TypeCon "ValueMap") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("$",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("$|",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("&&",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("*",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeCon "Number") (TypeVar "a"))))),("*|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("+",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("++",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("+|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("-",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("-|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),(".",Forall ["a","b","d"] (Qual [] (TypeArr (TypeArr (TypeVar "b") (TypeVar "d")) (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "d")))))),("/",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeCon "Number") (TypeVar "a"))))),("//",Forall ["a"] (Qual [IsIn "Fractional" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("/|",Forall ["a"] (Qual [IsIn "Fractional" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("<=",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("<~",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("==",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),(">=",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("?",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeCon "Number") (TypeVar "a"))))),("a",Forall [] (Qual [] (TypeCon "Number"))),("a0",Forall [] (Qual [] (TypeCon "Number"))),("a1",Forall [] (Qual [] (TypeCon "Number"))),("a2",Forall [] (Qual [] (TypeCon "Number"))),("a3",Forall [] (Qual [] (TypeCon "Number"))),("a4",Forall [] (Qual [] (TypeCon "Number"))),("a5",Forall [] (Qual [] (TypeCon "Number"))),("a6",Forall [] (Qual [] (TypeCon "Number"))),("a7",Forall [] (Qual [] (TypeCon "Number"))),("a8",Forall [] (Qual [] (TypeCon "Number"))),("a9",Forall [] (Qual [] (TypeCon "Number"))),("accelerate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("add",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("add11",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("add13",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("add9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("af",Forall [] (Qual [] (TypeCon "Number"))),("af0",Forall [] (Qual [] (TypeCon "Number"))),("af1",Forall [] (Qual [] (TypeCon "Number"))),("af2",Forall [] (Qual [] (TypeCon "Number"))),("af3",Forall [] (Qual [] (TypeCon "Number"))),("af4",Forall [] (Qual [] (TypeCon "Number"))),("af5",Forall [] (Qual [] (TypeCon "Number"))),("af6",Forall [] (Qual [] (TypeCon "Number"))),("af7",Forall [] (Qual [] (TypeCon "Number"))),("af8",Forall [] (Qual [] (TypeCon "Number"))),("af9",Forall [] (Qual [] (TypeCon "Number"))),("almostAlways",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("almostNever",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("always",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("amp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("append",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("arp",Forall ["a"] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeVar "a") (TypeVar "a"))))),("arpeggiate",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("arpg",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("as",Forall [] (Qual [] (TypeCon "Number"))),("as0",Forall [] (Qual [] (TypeCon "Number"))),("as1",Forall [] (Qual [] (TypeCon "Number"))),("as2",Forall [] (Qual [] (TypeCon "Number"))),("as3",Forall [] (Qual [] (TypeCon "Number"))),("as4",Forall [] (Qual [] (TypeCon "Number"))),("as5",Forall [] (Qual [] (TypeCon "Number"))),("as6",Forall [] (Qual [] (TypeCon "Number"))),("as7",Forall [] (Qual [] (TypeCon "Number"))),("as8",Forall [] (Qual [] (TypeCon "Number"))),("as9",Forall [] (Qual [] (TypeCon "Number"))),("ascii",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "Number")))),("att",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("attack",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("aug",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("bandf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bandq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bd",Forall [] (Qual [] (TypeCon "Text"))),("begin",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("binary",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("binshift",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bite",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a")))))),("blend",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("bpf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("bpq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("brak",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("brand",Forall [] (Qual [] (TypeCon "Number"))),("brandBy",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("c",Forall [] (Qual [] (TypeCon "Number"))),("c0",Forall [] (Qual [] (TypeCon "Number"))),("c1",Forall [] (Qual [] (TypeCon "Number"))),("c2",Forall [] (Qual [] (TypeCon "Number"))),("c3",Forall [] (Qual [] (TypeCon "Number"))),("c4",Forall [] (Qual [] (TypeCon "Number"))),("c5",Forall [] (Qual [] (TypeCon "Number"))),("c6",Forall [] (Qual [] (TypeCon "Number"))),("c7",Forall [] (Qual [] (TypeCon "Number"))),("c8",Forall [] (Qual [] (TypeCon "Number"))),("c9",Forall [] (Qual [] (TypeCon "Number"))),("ccn",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ccv",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("cf",Forall [] (Qual [] (TypeCon "Number"))),("cf0",Forall [] (Qual [] (TypeCon "Number"))),("cf1",Forall [] (Qual [] (TypeCon "Number"))),("cf2",Forall [] (Qual [] (TypeCon "Number"))),("cf3",Forall [] (Qual [] (TypeCon "Number"))),("cf4",Forall [] (Qual [] (TypeCon "Number"))),("cf5",Forall [] (Qual [] (TypeCon "Number"))),("cf6",Forall [] (Qual [] (TypeCon "Number"))),("cf7",Forall [] (Qual [] (TypeCon "Number"))),("cf8",Forall [] (Qual [] (TypeCon "Number"))),("cf9",Forall [] (Qual [] (TypeCon "Number"))),("channel",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("chew",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("chop",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("chunk",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("coarse",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("color",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeCon "Text"))))))),("comb",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("const",Forall ["a","b"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeVar "b") (TypeVar "a"))))),("contrast",Forall [] (Qual [] (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeCon "ValueMap") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))))),("cosine",Forall [] (Qual [] (TypeCon "Number"))),("cosine2",Forall [] (Qual [] (TypeCon "Number"))),("cps",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("crush",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("cs",Forall [] (Qual [] (TypeCon "Number"))),("cs0",Forall [] (Qual [] (TypeCon "Number"))),("cs1",Forall [] (Qual [] (TypeCon "Number"))),("cs2",Forall [] (Qual [] (TypeCon "Number"))),("cs3",Forall [] (Qual [] (TypeCon "Number"))),("cs4",Forall [] (Qual [] (TypeCon "Number"))),("cs5",Forall [] (Qual [] (TypeCon "Number"))),("cs6",Forall [] (Qual [] (TypeCon "Number"))),("cs7",Forall [] (Qual [] (TypeCon "Number"))),("cs8",Forall [] (Qual [] (TypeCon "Number"))),("cs9",Forall [] (Qual [] (TypeCon "Number"))),("ctf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("cut",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("cutoff",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("d",Forall [] (Qual [] (TypeCon "Number"))),("d0",Forall [] (Qual [] (TypeCon "Number"))),("d1",Forall [] (Qual [] (TypeCon "Number"))),("d2",Forall [] (Qual [] (TypeCon "Number"))),("d3",Forall [] (Qual [] (TypeCon "Number"))),("d4",Forall [] (Qual [] (TypeCon "Number"))),("d5",Forall [] (Qual [] (TypeCon "Number"))),("d6",Forall [] (Qual [] (TypeCon "Number"))),("d7",Forall [] (Qual [] (TypeCon "Number"))),("d8",Forall [] (Qual [] (TypeCon "Number"))),("d9",Forall [] (Qual [] (TypeCon "Number"))),("decay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("degrade",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("degradeBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("delay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("delayfb",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("delayt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("delaytime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("det",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("detune",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("df",Forall [] (Qual [] (TypeCon "Number"))),("df0",Forall [] (Qual [] (TypeCon "Number"))),("df1",Forall [] (Qual [] (TypeCon "Number"))),("df2",Forall [] (Qual [] (TypeCon "Number"))),("df3",Forall [] (Qual [] (TypeCon "Number"))),("df4",Forall [] (Qual [] (TypeCon "Number"))),("df5",Forall [] (Qual [] (TypeCon "Number"))),("df6",Forall [] (Qual [] (TypeCon "Number"))),("df7",Forall [] (Qual [] (TypeCon "Number"))),("df8",Forall [] (Qual [] (TypeCon "Number"))),("df9",Forall [] (Qual [] (TypeCon "Number"))),("dfb",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("diff",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("dim",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("dim7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("diminished",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("diminished7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("distort",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("djf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("dom11",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("dom13",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("dom7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("dom9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("drop",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("dry",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ds",Forall [] (Qual [] (TypeCon "Number"))),("ds0",Forall [] (Qual [] (TypeCon "Number"))),("ds1",Forall [] (Qual [] (TypeCon "Number"))),("ds2",Forall [] (Qual [] (TypeCon "Number"))),("ds3",Forall [] (Qual [] (TypeCon "Number"))),("ds4",Forall [] (Qual [] (TypeCon "Number"))),("ds5",Forall [] (Qual [] (TypeCon "Number"))),("ds6",Forall [] (Qual [] (TypeCon "Number"))),("ds7",Forall [] (Qual [] (TypeCon "Number"))),("ds8",Forall [] (Qual [] (TypeCon "Number"))),("ds9",Forall [] (Qual [] (TypeCon "Number"))),("dt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("dur",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("e",Forall [] (Qual [] (TypeCon "Number"))),("e0",Forall [] (Qual [] (TypeCon "Number"))),("e1",Forall [] (Qual [] (TypeCon "Number"))),("e2",Forall [] (Qual [] (TypeCon "Number"))),("e3",Forall [] (Qual [] (TypeCon "Number"))),("e4",Forall [] (Qual [] (TypeCon "Number"))),("e5",Forall [] (Qual [] (TypeCon "Number"))),("e6",Forall [] (Qual [] (TypeCon "Number"))),("e7",Forall [] (Qual [] (TypeCon "Number"))),("e8",Forall [] (Qual [] (TypeCon "Number"))),("e9",Forall [] (Qual [] (TypeCon "Number"))),("echo",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))))),("echoWith",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))))),("ef",Forall [] (Qual [] (TypeCon "Number"))),("ef0",Forall [] (Qual [] (TypeCon "Number"))),("ef1",Forall [] (Qual [] (TypeCon "Number"))),("ef2",Forall [] (Qual [] (TypeCon "Number"))),("ef3",Forall [] (Qual [] (TypeCon "Number"))),("ef4",Forall [] (Qual [] (TypeCon "Number"))),("ef5",Forall [] (Qual [] (TypeCon "Number"))),("ef6",Forall [] (Qual [] (TypeCon "Number"))),("ef7",Forall [] (Qual [] (TypeCon "Number"))),("ef8",Forall [] (Qual [] (TypeCon "Number"))),("ef9",Forall [] (Qual [] (TypeCon "Number"))),("eleven",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("elevenSharp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("end",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("enhance",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("envEq",Forall [] (Qual [] (TypeCon "Number"))),("envEqR",Forall [] (Qual [] (TypeCon "Number"))),("envL",Forall [] (Qual [] (TypeCon "Number"))),("envLR",Forall [] (Qual [] (TypeCon "Number"))),("eoff",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))))),("es",Forall [] (Qual [] (TypeCon "Number"))),("es0",Forall [] (Qual [] (TypeCon "Number"))),("es1",Forall [] (Qual [] (TypeCon "Number"))),("es2",Forall [] (Qual [] (TypeCon "Number"))),("es3",Forall [] (Qual [] (TypeCon "Number"))),("es4",Forall [] (Qual [] (TypeCon "Number"))),("es5",Forall [] (Qual [] (TypeCon "Number"))),("es6",Forall [] (Qual [] (TypeCon "Number"))),("es7",Forall [] (Qual [] (TypeCon "Number"))),("es8",Forall [] (Qual [] (TypeCon "Number"))),("es9",Forall [] (Qual [] (TypeCon "Number"))),("euclid",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a")))))),("euclidFull",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))))),("euclidInv",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a")))))),("euclidOff",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))))),("every",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("expand",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("expression",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("f",Forall [] (Qual [] (TypeCon "Number"))),("f0",Forall [] (Qual [] (TypeCon "Number"))),("f1",Forall [] (Qual [] (TypeCon "Number"))),("f2",Forall [] (Qual [] (TypeCon "Number"))),("f3",Forall [] (Qual [] (TypeCon "Number"))),("f4",Forall [] (Qual [] (TypeCon "Number"))),("f5",Forall [] (Qual [] (TypeCon "Number"))),("f6",Forall [] (Qual [] (TypeCon "Number"))),("f7",Forall [] (Qual [] (TypeCon "Number"))),("f8",Forall [] (Qual [] (TypeCon "Number"))),("f9",Forall [] (Qual [] (TypeCon "Number"))),("fadeInTime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("fadeOutTime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("fadeTime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("false",Forall [] (Qual [] (TypeCon "Number"))),("fast",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("fastGap",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("ff",Forall [] (Qual [] (TypeCon "Number"))),("ff0",Forall [] (Qual [] (TypeCon "Number"))),("ff1",Forall [] (Qual [] (TypeCon "Number"))),("ff2",Forall [] (Qual [] (TypeCon "Number"))),("ff3",Forall [] (Qual [] (TypeCon "Number"))),("ff4",Forall [] (Qual [] (TypeCon "Number"))),("ff5",Forall [] (Qual [] (TypeCon "Number"))),("ff6",Forall [] (Qual [] (TypeCon "Number"))),("ff7",Forall [] (Qual [] (TypeCon "Number"))),("ff8",Forall [] (Qual [] (TypeCon "Number"))),("ff9",Forall [] (Qual [] (TypeCon "Number"))),("five",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("fix",Forall [] (Qual [] (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeCon "ValueMap") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("floor",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("freeze",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("freq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("from",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("fs",Forall [] (Qual [] (TypeCon "Number"))),("fs0",Forall [] (Qual [] (TypeCon "Number"))),("fs1",Forall [] (Qual [] (TypeCon "Number"))),("fs2",Forall [] (Qual [] (TypeCon "Number"))),("fs3",Forall [] (Qual [] (TypeCon "Number"))),("fs4",Forall [] (Qual [] (TypeCon "Number"))),("fs5",Forall [] (Qual [] (TypeCon "Number"))),("fs6",Forall [] (Qual [] (TypeCon "Number"))),("fs7",Forall [] (Qual [] (TypeCon "Number"))),("fs8",Forall [] (Qual [] (TypeCon "Number"))),("fs9",Forall [] (Qual [] (TypeCon "Number"))),("fshift",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("g",Forall [] (Qual [] (TypeCon "Number"))),("g0",Forall [] (Qual [] (TypeCon "Number"))),("g1",Forall [] (Qual [] (TypeCon "Number"))),("g2",Forall [] (Qual [] (TypeCon "Number"))),("g3",Forall [] (Qual [] (TypeCon "Number"))),("g4",Forall [] (Qual [] (TypeCon "Number"))),("g5",Forall [] (Qual [] (TypeCon "Number"))),("g6",Forall [] (Qual [] (TypeCon "Number"))),("g7",Forall [] (Qual [] (TypeCon "Number"))),("g8",Forall [] (Qual [] (TypeCon "Number"))),("g9",Forall [] (Qual [] (TypeCon "Number"))),("gain",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("gap",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("gat",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("gate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("gf",Forall [] (Qual [] (TypeCon "Number"))),("gf0",Forall [] (Qual [] (TypeCon "Number"))),("gf1",Forall [] (Qual [] (TypeCon "Number"))),("gf2",Forall [] (Qual [] (TypeCon "Number"))),("gf3",Forall [] (Qual [] (TypeCon "Number"))),("gf4",Forall [] (Qual [] (TypeCon "Number"))),("gf5",Forall [] (Qual [] (TypeCon "Number"))),("gf6",Forall [] (Qual [] (TypeCon "Number"))),("gf7",Forall [] (Qual [] (TypeCon "Number"))),("gf8",Forall [] (Qual [] (TypeCon "Number"))),("gf9",Forall [] (Qual [] (TypeCon "Number"))),("gradient",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Text")))),("grain",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "ValueMap"))))),("gs",Forall [] (Qual [] (TypeCon "Number"))),("gs0",Forall [] (Qual [] (TypeCon "Number"))),("gs1",Forall [] (Qual [] (TypeCon "Number"))),("gs2",Forall [] (Qual [] (TypeCon "Number"))),("gs3",Forall [] (Qual [] (TypeCon "Number"))),("gs4",Forall [] (Qual [] (TypeCon "Number"))),("gs5",Forall [] (Qual [] (TypeCon "Number"))),("gs6",Forall [] (Qual [] (TypeCon "Number"))),("gs7",Forall [] (Qual [] (TypeCon "Number"))),("gs8",Forall [] (Qual [] (TypeCon "Number"))),("gs9",Forall [] (Qual [] (TypeCon "Number"))),("h",Forall [] (Qual [] (TypeCon "Number"))),("h0",Forall [] (Qual [] (TypeCon "Number"))),("h1",Forall [] (Qual [] (TypeCon "Number"))),("h2",Forall [] (Qual [] (TypeCon "Number"))),("h3",Forall [] (Qual [] (TypeCon "Number"))),("h4",Forall [] (Qual [] (TypeCon "Number"))),("h5",Forall [] (Qual [] (TypeCon "Number"))),("h6",Forall [] (Qual [] (TypeCon "Number"))),("h7",Forall [] (Qual [] (TypeCon "Number"))),("h8",Forall [] (Qual [] (TypeCon "Number"))),("h9",Forall [] (Qual [] (TypeCon "Number"))),("harmonic",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hbrick",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hcutoff",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hf",Forall [] (Qual [] (TypeCon "Number"))),("hf0",Forall [] (Qual [] (TypeCon "Number"))),("hf1",Forall [] (Qual [] (TypeCon "Number"))),("hf2",Forall [] (Qual [] (TypeCon "Number"))),("hf3",Forall [] (Qual [] (TypeCon "Number"))),("hf4",Forall [] (Qual [] (TypeCon "Number"))),("hf5",Forall [] (Qual [] (TypeCon "Number"))),("hf6",Forall [] (Qual [] (TypeCon "Number"))),("hf7",Forall [] (Qual [] (TypeCon "Number"))),("hf8",Forall [] (Qual [] (TypeCon "Number"))),("hf9",Forall [] (Qual [] (TypeCon "Number"))),("hlayer",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("hmask",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("hold",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hpf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hpq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hresonance",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("hs",Forall [] (Qual [] (TypeCon "Number"))),("hs0",Forall [] (Qual [] (TypeCon "Number"))),("hs1",Forall [] (Qual [] (TypeCon "Number"))),("hs2",Forall [] (Qual [] (TypeCon "Number"))),("hs3",Forall [] (Qual [] (TypeCon "Number"))),("hs4",Forall [] (Qual [] (TypeCon "Number"))),("hs5",Forall [] (Qual [] (TypeCon "Number"))),("hs6",Forall [] (Qual [] (TypeCon "Number"))),("hs7",Forall [] (Qual [] (TypeCon "Number"))),("hs8",Forall [] (Qual [] (TypeCon "Number"))),("hs9",Forall [] (Qual [] (TypeCon "Number"))),("hshape",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Text")))))),("hurry",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("i",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("id",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("imag",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("inside",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("interlace",Forall [] (Qual [] (TypeArr (TypeCon "ValueMap") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("inv",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("irand",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("isaw",Forall [] (Qual [] (TypeCon "Number"))),("isaw2",Forall [] (Qual [] (TypeCon "Number"))),("iter",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("jux",Forall [] (Qual [] (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("juxBy",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("juxcut",Forall [] (Qual [] (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("krush",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("lagogo",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("layer",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("lbrick",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("legato",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("leslie",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("linger",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("lock",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("loop",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("loopAt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("loopFirst",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("lpf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("lpq",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("m",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m11",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m11s",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m11sharp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m13",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m6",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m69",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m6by9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7f5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7f9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7flat5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7flat9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7s5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7s9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7sharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7sharp5flat9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m7sharp9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m9s5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("m9sharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("mS5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("mSixNine",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("maj",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("maj11",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("maj13",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("maj7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("maj9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("major",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("major11",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("major13",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("major7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("major9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("mask",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("midibend",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("miditouch",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("min",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min11",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min13",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min6",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min69",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7f5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7f9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7flat5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7flat9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7s5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7s9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7sharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min7sharp9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min9s5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("min9sharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minSixNine",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor11",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor11sharp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor13",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor6",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor69",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7f5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7f9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7flat5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7flat9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7s5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7s9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7sharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7sharp5flat9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor7sharp9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor9s5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minor9sharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minorSharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("minorSixNine",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("modulate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("modulateHue",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("modulateKaleid",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("modwheel",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("mono",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("msharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("mult",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "Text")))))),("n",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("never",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("nine",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("nineSharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("nineSus4",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("ninesus4",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("noise",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Text")))),("note",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("nudge",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("number",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octave",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octer",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octersub",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("octersubsub",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("offset",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("often",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("one",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("open",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("orbit",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("osc",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Text")))),("out",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Text") (TypeCon "Text"))))),("outside",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("overgain",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("overlay",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("overshape",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("pB",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Number") (TypeCon "ValueMap"))))),("pN",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Number") (TypeCon "ValueMap"))))),("pS",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Text") (TypeCon "ValueMap"))))),("pan",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("panorient",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("panspan",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("pansplay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("panwidth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("partials",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("perlin",Forall [] (Qual [] (TypeCon "Number"))),("perlin2",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("perlin2With",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("perlinWith",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("phasdp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("phaserdepth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("phaserrate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("phasr",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("plus",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("ply",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("plyWith",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("por",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("press",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("pressBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("rand",Forall [] (Qual [] (TypeCon "Number"))),("randslice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("range",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number")))))),("rangex",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number")))))),("rarely",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("rate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("real",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rel",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("release",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("repeatCycles",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("resonance",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rev",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("ring",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ringdf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("ringf",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rolled",Forall ["a"] (Qual [] (TypeArr (TypeVar "a") (TypeVar "a")))),("rolledBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("room",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("rotL",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("rotR",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("round",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("run",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("s",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("sagogo",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("saw",Forall [] (Qual [] (TypeCon "Number"))),("saw2",Forall [] (Qual [] (TypeCon "Number"))),("scale",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("scan",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("scr",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("scram",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("scramble",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("segment",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("sevenFlat10",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sevenFlat5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sevenFlat9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sevenSharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sevenSharp5flat9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sevenSus2",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sevenSus4",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sew",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a")))))),("shape",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sharp5",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("show",Forall ["a"] (Qual [IsIn "Show" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeCon "Text")))),("shuffle",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("silence",Forall ["a"] (Qual [] (TypeVar "a"))),("sine",Forall [] (Qual [] (TypeCon "Number"))),("sine2",Forall [] (Qual [] (TypeCon "Number"))),("six",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("six9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sixNine",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sixby9",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("size",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sld",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("slice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("slide",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("slow",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("slowSqueeze",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("slowstripe",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("smear",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("smooth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sn",Forall [] (Qual [] (TypeCon "Text"))),("solid",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Text")))))),("someCycles",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("someCyclesBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("sometimes",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("sometimesBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("sound",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("speed",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("spin",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("splat",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("splice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("square",Forall [] (Qual [] (TypeCon "Number"))),("square2",Forall [] (Qual [] (TypeCon "Number"))),("squiz",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("src",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "Text")))),("std",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("stitch",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a")))))),("striate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap"))))),("striateBy",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("stripe",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("struct",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("stt",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("stutterdepth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("stuttertime",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("substruct",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("superimpose",Forall ["a"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))),("sus",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sus2",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sus4",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("sustain",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("sustainpedal",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("swing",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("swingBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a")))))),("sz",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("thirteen",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "Number")))),("tick",Forall ["a","b"] (Qual [] (TypeArr (TypeVar "a") (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeVar "b"))))),("timeLoop",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("timescale",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("timescalewin",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("to",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("toArg",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("tremdp",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tremolodepth",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tremolorate",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tremr",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("tri",Forall [] (Qual [] (TypeCon "Number"))),("tri2",Forall [] (Qual [] (TypeCon "Number"))),("triode",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("true",Forall [] (Qual [] (TypeCon "Number"))),("trunc",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("tsdelay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("unDegradeBy",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a"))))),("unfix",Forall [] (Qual [] (TypeArr (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")) (TypeArr (TypeCon "ValueMap") (TypeArr (TypeCon "ValueMap") (TypeCon "ValueMap")))))),("unit",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("up",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("velocity",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("voi",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("voice",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("voronoi",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Text")))))),("vowel",Forall [] (Qual [] (TypeArr (TypeCon "Text") (TypeCon "ValueMap")))),("waveloss",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("wedge",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a")))))),("whenmod",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a"))))))),("while",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeArr (TypeVar "a") (TypeVar "a")) (TypeArr (TypeVar "a") (TypeVar "a")))))),("xsdelay",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeCon "ValueMap")))),("|$",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("|$|",Forall ["a","b"] (Qual [] (TypeArr (TypeArr (TypeVar "a") (TypeVar "b")) (TypeArr (TypeVar "a") (TypeVar "b"))))),("|*",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|*|",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|+",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|-",Forall ["a"] (Qual [IsIn "Num" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("|/",Forall ["a"] (Qual [IsIn "Fractional" (TypeVar "a")] (TypeArr (TypeVar "a") (TypeArr (TypeVar "a") (TypeVar "a"))))),("||",Forall [] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeCon "Number") (TypeCon "Number"))))),("~>",Forall ["a"] (Qual [] (TypeArr (TypeCon "Number") (TypeArr (TypeVar "a") (TypeVar "a")))))]
